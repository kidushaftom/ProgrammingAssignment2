#Aggrigating and ploting by intervals
df<-aggregate(steps ~ interval,readData(), mean)
with ( df,
#plot
plot(steps ~ interval,type='l',
main="Time series plot of the average number of steps taken",
xlab="Interval")
)
#max intrval
print("Interval contains the maximum number of steps")
df[which.max(df$steps),]
}
steps_by_interval()
steps_by_interval<-function()
{
#Aggrigating and ploting by intervals
df<-aggregate(steps ~ interval,readData(), mean)
with ( df,
#plot
plot(steps ~ interval,type='l',
main="Time series plot of the average number of steps taken",
xlab="Interval")
)
#max intrval
print("The 5-minute interval that, on average,
contains the maximum number of steps")
df[which.max(df$steps),]
}
steps_by_interval()
steps_hist_stat<-function(){
#summarizing data by day
daily<-readData()%>%
group_by(date)%>%
summarise(total_steps=sum(steps))
#ploting steps
with(daily,hist(total_steps, main="Total number of steps per day",
xlab="steps/Day",col="light blue"))
#Mean and median number of steps taken each day
print("Mean and median number of steps taken each day")
summarise(daily,mean=mean(total_steps),
median=median(total_steps))
}
steps_hist_stat()
steps_by_interval<-function()
{
#Aggrigating and ploting by intervals
df<-aggregate(steps ~ interval,readData(), mean)
with ( df,
#plot
plot(steps ~ interval,type='l',
main="Time series plot of the average number of steps taken",
xlab="Interval")
)
#max intrval
print("The 5-minute interval that, on average,
contains the maximum number of steps")
df[which.max(df$steps),]
}
steps_by_interval()
getwd()
head(readData())
head(readData()$interval)
library("ggplot2", lib.loc="~/R/win-library/3.4")
p <- ggplot(data = readData(), aes(x = steps)) + geom_histogram(binwidth = 1000)
p + facet_wrap(~interva)
#========================================================================
data<-readData()
data<-readData()
p <- ggplot(data , aes(x = steps)) + geom_histogram(binwidth = 1000)
p + facet_wrap(~interva)
data<-readData()
p <- ggplot(data , aes(x = steps)) + geom_histogram(binwidth = 1000)
p + facet_wrap(~factor(interva))
data<-readData()
p <- ggplot(data , aes(x = steps)) + geom_histogram(binwidth = 1000)
p + facet_wrap(~factor(interval))
data<-readData()
p <- ggplot(data , aes(x = steps)) + geom_histogram(binwidth = 1000)
p + facet_wrap(~as.factor(interval))
data<-readData()
p <- ggplot(data , aes(x = steps)) + geom_histogram()
p + facet_wrap(~as.factor(interval))
split(readData,interval)
split(readData,intervals)
names(readData())
split(readData,interval)
split(readData,"interval")
?tapply(readData(), interval, mean)
tapply(readData(), interval, mean)
data<-readData()
names(data)
tapply(data, interval, mean)
tapply(data, "interval", mean)
vapply(readData(), interval, mean)
?split
split(data,as.factor(interval))
split(data,as.factor(interva))
knitr::opts_chunk$set(echo = TRUE)
meanvalus<-aggregate(steps ~ interval,readData(), mean)
meanvalus
navalus<-readData()[which(is.na(readData()))]
navalus
data<-readData()
meanvalus<-aggregate(steps ~ interval,data, mean)
meanvalus
navalus
navalus<-data[which(is.na(data),]
data<-readData()
meanvalus<-aggregate(steps ~ interval,data, mean)
navalus<-data[which(is.na(data)),]
meanvalus
navalus
#========================================================================
is.na(readData())
#========================================================================
which(is.na(readData())
#========================================================================
which(is.na(readData()))
#========================================================================
which(is.na(readData()))
#======================================================================
which(is.na(readData()))
##Function for reading Data set
readData<-function()
{
df<-read.csv("activity.csv",header=T,sep=",",colClass=c("numeric","Date","numeric"))
#df[complete.cases(df),]
}
#======================================================================
which(is.na(readData()))
#======================================================================
readData()[which(is.na(readData())),]
readData()[which(is.na(readData())),c(1,3)]
#======================================================================
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
if nas$interval==means$interval{
nas$steps<-means$steps
}
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
if(nas$interval==means$interval){
nas$steps<-means$steps
}
#======================================================================
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for i in leng(nas){
if(nas$interval==means$interval){
nas$steps<-means$steps
}
}
length(nas)
nrows(nas)
nrow(nas)
#======================================================================
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for i in nrow(nas){
if(nas$interval==means$interval){
nas$steps<-means$steps
}
}
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for i in nrow(nas){
if(nas$interval[i]==means$interval){
nas$steps[i]<-means$steps
}
}
nrow(nas)
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in nrow(nas)){
if(nas$interval[i]==means$interval){
nas$steps[i]<-means$steps
}
}
nrow(nas)
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(nas))
{
if(nas$interval[i]==means$interval[i]){
nas$steps[i]<-means$steps[i]
}
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(nas))
{
if(nas$interval[i]==means$interval[i]){
nas$steps[i]<-means$steps[i]
}
}
sdafass
saf
sdav
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(nas))
{
if(nas$interval[i]==means$interval[i])
{
nas$steps[i]<-means$steps[i]
}
}
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(nas))
{
if(nas$interval[i]==means$interval[i])
{
nas$steps[i]<-means$steps[i]
}
}
nrow(nas)
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(nas))
{
if(nas$interval[i]==means$interval[i])
{
nas$steps[i]<-means$steps[i]
}
nas
}
nrow(nas)
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(nas))
{
if(nas$interval[i]==means$interval)
{
nas$steps[i]<-means$steps
}
nas
}
if(nas$interval[i]==means$interval)
source('C:/Users/Haftom/Desktop/coursera/Actitvity monitoring/dd.R')
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(nas))
{
if(nas$interval[i]==means$interval)
{
nas$steps[i]<-means$steps
}
nas
}
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(nas))
{
if(nas$interval[i]==means$interval)
{
nas$steps[i]<-means$steps
}
nas
}
nrow(nas)
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(nas))
{
if(nas$interval[i]==means$interval)
{
nas$steps[i]<-means$steps
}
nas
}
nrow(nas)
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(nas))
{
if(nas$interval[i]==means$interval)
{
nas$steps[i]<-means$steps
}
nas
}
nrow(nas)
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(nas))
{
if(nas$interval[i]==means$interval)
{
nas$steps[i]<-means$steps
}
nas
}
nas<-readData()[which(is.na(readData())),c(1,3)]
means<-aggregate(steps ~ interval,readData(), mean)
if (nas$interval[i]%in% means$interval[i])
{
means$steps[i]
}
nas$interval%in% means$interval
nas<-readData()[which(is.na(readData())),]
means<-aggregate(steps ~ interval,readData(), mean)
1+1
data<-readData()
mean_imputation<-function()
{
for (i in nrow(data))
{
if (is.na(data$step[i]))
{
intervalna<-data$interval[i]
stepsna <- df[df$interval ==intervalna,]
data$steps[i]<-stepsna$steps
}
}
table(is.na(data))
}
mean_imputation()
data<-readData()
for (i in nrow(data))
{
if (is.na(data$step[i]))
{
intervalna<-data$interval[i]
stepsna <- df[df$interval ==intervalna,]
data$steps[i]<-stepsna$steps
}
}
table(is.na(data))
data<-readData()
head(data)
data<-readData()
for (i in nrow(data))
{
if (is.na(data$step[i]))
{
intervalna<-data$interval[i]
stepsna <- df[df$interval ==intervalna,]
data$steps[i]<-stepsna$steps
}
}
nrow(data)
is.na(data$step)
intervalna<-data$interval[i]
stepsna <- df[df$interval ==intervalna,]
intervalna
df<-aggregate(steps ~ interval,readData(), mean)
intervalna<-data$interval[i]
stepsna <- df[df$interval==intervalna,]
data$steps[i]<-stepsna$steps
{
intervalna<-data$interval[i]
stepsna <- df[df$interval==intervalna,]
data$steps[i]<-stepsna$steps
}
{
if (is.na(data$step[i]))
{
intervalna<-data$interval[i]
stepsna <- df[df$interval==intervalna,]
data$steps[i]<-stepsna$steps
}
}
table(is.na(data))
data<-readData()
df<-aggregate(steps ~ interval,readData(), mean)
for (i in nrow(data))
{
if (is.na(data$step[i]))
{
intervalna<-data$interval[i]
stepsna <- df[df$interval==intervalna,]
data$steps[i]<-stepsna$steps
}
}
table(is.na(data))
stepsna <- df[df$interval==intervalna,]
data<-readData()
df<-aggregate(steps ~ interval,readData(), mean)
for (i in nrow(data))
{
if (is.na(data$step[i]))
{
intervalna<-data$interval[i]
stepsna <- df[df$interval==intervalna,]
data$steps[i]<-stepsna$steps
}
}
data<-readData()
df<-aggregate(steps ~ interval,readData(), mean)
mean_imputation<-function()
{
for (i in nrow(data))
{
if (is.na(data$step[i]))
{
intervalna<-data$interval[i]
stepsna <- df[df$interval==intervalna,]
data$steps[i]<-stepsna$steps
}
}
table(is.na(data))
}
data<-readData()
df<-aggregate(steps ~ interval,readData(), mean)
mean_imputation<-function()
{
for (i in nrow(data))
{
if (is.na(data$step[i]))
{
intervalna<-data$interval[i]
stepsna <- df[df$interval==intervalna,]
data$steps[i]<-stepsna$steps
}
}
table(is.na(data))
}
mean_imputation()
data<-readData()
df<-aggregate(steps ~ interval,readData(), mean)
data_imputed <- data_row
for (i in 1:nrow(data)) {
if (is.na(data$steps[i])) {
interval_value <- data$interval[i]
steps_value <- df[df$interval == interval_value,]
data$steps[i] <- steps_value$steps
}
}
data<-readData()
df<-aggregate(steps ~ interval,readData(), mean)
for (i in 1:nrow(data)) {
if (is.na(data$steps[i])) {
interval_value <- data$interval[i]
steps_value <- df[df$interval == interval_value,]
data$steps[i] <- steps_value$steps
}
}
table(is.na(data))
data<-readData()
df<-aggregate(steps ~ interval,readData(), mean)
clean_data<-function()
{
for (i in 1:nrow(data)) {
if (is.na(data$steps[i])) {
interval_value <- data$interval[i]
steps_value <- df[df$interval == interval_value,]
data$steps[i] <- steps_value$steps
}
}
table(is.na(data))
}
clean_data()
data<-readData()
df<-aggregate(steps ~ interval,readData(), mean)
clean_data<-function()
{
for (i in 1:nrow(data)) {
if (is.na(data$steps[i])) {
interval_value <- data$interval[i]
steps_value <- df[df$interval == interval_value,]
data$steps[i] <- steps_value$steps
}
}
print("check if there are anymore NA's")
table(is.na(data))
}
knitr::opts_chunk$set(echo = TRUE)
steps_by_interval(readData)
steps_by_interval(readData())
steps_by_interval(readData())
steps<-steps_by_interval(readData())
data$weekdays<-weekdays(as.Date(data$date))
weekday<-filter(data,weekdays %!in% c('Saturday','Sunday'))
data$weekdays<-weekdays(as.Date(data$date))
weekday<-filter(data,weekdays %!in% c('Saturday','Sunday'))
weekdays(as.Date(data$date))
unique(weekdays(as.Date(data$date))
sadf
saf
unique(weekdays(as.Date(data$date)))
head(data)
str(step_data)
data$weekdays<-weekdays(as.Date(data$date))
data$weekdays[data$weekdays %in% c('Saturday','Sunday')]<-'weekend'
data$weekdays[data$weekdays %in% c('Monday','Tuesday','Wednesday','Thursday','Friday')]<-'weekdays'
step_data<-aggregate(steps ~ interval+weekdays,data, mean)
ggplot(step_data,aes(steps,interval))_geom_line()
ggplot(step_data,aes(interval,steps)) + geom_line()
library("ggplot2", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
library("knitr", lib.loc="~/R/win-library/3.4")
ggplot(step_data,aes(interval,steps)) + geom_line()
ggplot(step_data,aes(interval,steps)) + geom_line(group_by(weekdays))
ggplot(step_data,aes(interval,steps)) + geom_line(aes(class=weekdays))
ggplot(step_data,aes(interval,steps,color=weekdays)) + geom_line(aes(class=weekdays))
ggplot(step_data,aes(interval,steps))
+ geom_line()+FacetWrap(~weekpart)
ggplot(step_data,aes(interval,steps))
+ geom_line()+FacetWrap(~weekpart,ncol = 1))
+ geom_line()+FacetWrap(~weekpart,ncol = 1)
ggplot(step_data,aes(interval,steps))
p<-ggplot(step_data,aes(interval,steps))
p+geom_line()
p+facet_wrap(~weekpart,ncol=1)
p<-ggplot(step_data,aes(interval,steps))
p+geom_line()
p+facet_wrap(~weekpart,ncol=2)
p<-ggplot(step_data,aes(interval,steps))
p+geom_line()
p+facet_wrap(~weekpart,ncol=1)
